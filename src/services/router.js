import DOMBuilder from './domBuilder.js';
import api from '../services/api.js';

// Router is a regex that describes the pattern of the path and its value is
// the handler that will fill the markup, this handler will take as parameter
// the match that have been generated by the regex object
const RouterMap = {
  '/': (match) => DOMBuilder('quiz-question' ),
  '/users': () => DOMBuilder('users-page'),
  '/projects': () => DOMBuilder('projects-page'),
  '/concepts': () => DOMBuilder('h1', 'Concepts Page'),
  '/projects/show/([0-9]+)': showProject,
  '.*': () => DOMBuilder('h1', 'Not Found'),
};

function showProject(match)
{
  const currentProjectId = match[1];
  api.getProjectQuiz(currentProjectId).then((quizes) => {
    if (quizes) {
      app.data.projectQuiz = {
        all: quizes,
        currentQuizIndex: 0
      };
    }
  });
  const wrapper = DOMBuilder('project-page');
  wrapper.appendChild(DOMBuilder('quiz-question'));
  return wrapper;
}

const Router = {
  init() {
    document.body.addEventListener('click', this._onLinkClicked);
    window.addEventListener('popstate', function handlePopState(e) {
      // When use clicks get back, dont't pash to history
      Router.go(e.state.path, false);
    })
    Router.go(location.pathname); // navigate to path typed by user
  },

  go(path, addToHistory=true) {
    if (addToHistory) {
      history.pushState({ path }, '', path);
    }
    if (path.at(-1) == '/' && path.length > 1) {
      path = path.slice(0, path.length - 1);
    }
    Router.renderPage(path);
  },

  renderPage(path) {
    const pageContent = this._getRouteMarkup(path);
    if (!(pageContent instanceof Node))
      console.error("Route:", path, "Function handler must return valid Node. Got:", pageContent);
    const root = document.querySelector('#root');
    root.innerHTML = '';
    root.appendChild(pageContent || DOMBuilder('br'));
    window.scrollX = 0;
    window.scrollY = 0;
  },

  _onLinkClicked(event) {
    const link = event.target.closest('a');
    if (!link || link.getAttribute('target') == '_blank') return;
    event.preventDefault();
    const href = link.getAttribute('href');
    Router.go(href);
  },

  _getRouteMarkup(path) {
    for (const [pathPattern, factory] of Object.entries(RouterMap)) {
      const rg = new RegExp('^'+pathPattern+'$');
      const match = rg.exec(path);
      if (match) {
        return factory(match);
      }
    }
  }
}

export default Router;
